# What it is: Nginx forwards client requests to another server (e.g., a Node.js app), and then returns the response to the client.
# Use Case: Hiding backend server (like localhost:3000) behind Nginx.

server {
  listen 80;
  server_name api.okala.com;

  location / {
    proxy_pass http://localhost:3000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}

# Explanation: Incoming requests to api.okala.com are proxied to a backend service running on port 3000.
# Headers are passed to preserve original request info

# =====================================================================================

server {
  listen 80;
  server_name okala.com;

  location / {
    proxy_pass http://127.0.0.1:3000;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  }
}

# In this example, Nginx acts as a reverse proxy forwarding requests to an internal server running on port 3000 (e.g., a Next.js app):