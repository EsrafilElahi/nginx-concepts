# Round Robin (Default): Requests are distributed sequentially across servers. This is the default method.

upstream backend {
  server backend1.example.com;
  server backend2.example.com;
  server backend3.example.com;
}

server {
  listen 80;

  location / {
    proxy_pass http://backend;
  }
}

# Least Connections: New requests are sent to the server with the fewest active connections.
# Use Case: Great for long-lived connections like WebSockets or slow APIs.

upstream backend {
  least_conn;
  server backend1.example.com;
  server backend2.example.com;
  server backend3.example.com;
}

server {
  listen 80;

  location / {
    proxy_pass http://backend;
  }
}

# IP Hash: Requests from the same client IP always go to the same server (session persistence).
# Use Case: When using session-based authentication stored in memory.

upstream backend {
  ip_hash;
  server backend1.example.com;
  server backend2.example.com;
  server backend3.example.com;
}

server {
  listen 80;

  location / {
    proxy_pass http://backend;
  }
}

# Weight (Weighted Round Robin): Assigns a weight to each server â€” higher weight = more traffic.
# Use Case: Some servers are more powerful than others.

upstream backend {
  server backend1.example.com weight=5;
  server backend2.example.com weight=3;
  server backend3.example.com weight=1;
}

server {
  listen 80;

  location / {
    proxy_pass http://backend;
  }
}

# Backup Server: Define one or more backup servers to use only if all primary servers fail.
# Use Case: Failover scenario.

upstream backend {
  server backend1.example.com;
  server backend2.example.com;
  server backup1.example.com backup;
}

server {
  listen 80;

  location / {
    proxy_pass http://backend;
  }
}

